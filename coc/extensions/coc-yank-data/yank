2f92089b756d4463640aca81487042ea|file:///home/leo/.config/nvim/init.vim|2|1|V|vim
	map <Space> <leader>
0228e91bb6710d0c91ca3c2dcd9764dd|file:///home/leo/.config/nvim/init.vim|2|1|V|vim
	vnoremap fd <ESC>
d131ef6911d5b8434723efebe3c45ae6|file:///home/leo/.config/nvim/coc-settings.json|1|1|V|json
	" TextEdit might fail if hidden is not set.
	set hidden
	
	" Some servers have issues with backup files, see #649.
	set nobackup
	set nowritebackup
	
	" Give more space for displaying messages.
	set cmdheight=2
	
	" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
	" delays and poor user experience.
	set updatetime=300
	
	" Don't pass messages to |ins-completion-menu|.
	set shortmess+=c
	
	" Always show the signcolumn, otherwise it would shift the text each time
	" diagnostics appear/become resolved.
	if has("patch-8.1.1564")
	  " Recently vim can merge signcolumn and number column into one
	  set signcolumn=number
	else
	  set signcolumn=yes
	endif
	
	" Use tab for trigger completion with characters ahead and navigate.
	" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
	" other plugin before putting this into your config.
	inoremap <silent><expr> <TAB>
	      \ pumvisible() ? "\<C-n>" :
	      \ <SID>check_back_space() ? "\<TAB>" :
	      \ coc#refresh()
	inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
	
	function! s:check_back_space() abort
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~# '\s'
	endfunction
	
	" Use <c-space> to trigger completion.
	if has('nvim')
	  inoremap <silent><expr> <c-space> coc#refresh()
	else
	  inoremap <silent><expr> <c-@> coc#refresh()
	endif
	
	" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
	" position. Coc only does snippet and additional edit on confirm.
	" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
	if exists('*complete_info')
	  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
	else
	  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
	endif
	
	" Use `[g` and `]g` to navigate diagnostics
	" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
	nmap <silent> [g <Plug>(coc-diagnostic-prev)
	nmap <silent> ]g <Plug>(coc-diagnostic-next)
	
	" GoTo code navigation.
	nmap <silent> gd <Plug>(coc-definition)
	nmap <silent> gy <Plug>(coc-type-definition)
	nmap <silent> gi <Plug>(coc-implementation)
	nmap <silent> gr <Plug>(coc-references)
	
	" Use K to show documentation in preview window.
	nnoremap <silent> K :call <SID>show_documentation()<CR>
	
	function! s:show_documentation()
	  if (index(['vim','help'], &filetype) >= 0)
	    execute 'h '.expand('<cword>')
	  else
	    call CocAction('doHover')
	  endif
	endfunction
	
	" Highlight the symbol and its references when holding the cursor.
	autocmd CursorHold * silent call CocActionAsync('highlight')
	
	" Symbol renaming.
	nmap <leader>rn <Plug>(coc-rename)
	
	" Formatting selected code.
	xmap <leader>f  <Plug>(coc-format-selected)
	nmap <leader>f  <Plug>(coc-format-selected)
	
	augroup mygroup
	  autocmd!
	  " Setup formatexpr specified filetype(s).
	  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	  " Update signature help on jump placeholder.
	  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
	augroup end
	
	" Applying codeAction to the selected region.
	" Example: `<leader>aap` for current paragraph
	xmap <leader>a  <Plug>(coc-codeaction-selected)
	nmap <leader>a  <Plug>(coc-codeaction-selected)
	
	" Remap keys for applying codeAction to the current buffer.
	nmap <leader>ac  <Plug>(coc-codeaction)
	" Apply AutoFix to problem on the current line.
	nmap <leader>qf  <Plug>(coc-fix-current)
	
	" Map function and class text objects
	" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
	xmap if <Plug>(coc-funcobj-i)
	omap if <Plug>(coc-funcobj-i)
	xmap af <Plug>(coc-funcobj-a)
	omap af <Plug>(coc-funcobj-a)
	xmap ic <Plug>(coc-classobj-i)
	omap ic <Plug>(coc-classobj-i)
	xmap ac <Plug>(coc-classobj-a)
	omap ac <Plug>(coc-classobj-a)
	
	" Use CTRL-S for selections ranges.
	" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
	nmap <silent> <C-s> <Plug>(coc-range-select)
	xmap <silent> <C-s> <Plug>(coc-range-select)
	
	" Add `:Format` command to format current buffer.
	command! -nargs=0 Format :call CocAction('format')
	
	" Add `:Fold` command to fold current buffer.
	command! -nargs=? Fold :call     CocAction('fold', <f-args>)
	
	" Add `:OR` command for organize imports of the current buffer.
	command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
	
	" Add (Neo)Vim's native statusline support.
	" NOTE: Please see `:h coc-status` for integrations with external plugins that
	" provide custom statusline: lightline.vim, vim-airline.
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	
	" Mappings for CoCList
	" Show all diagnostics.
	nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
	" Manage extensions.
	nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
	" Show commands.
	nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
	" Find symbol of current document.
	nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
	" Search workspace symbols.
	nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
	" Do default action for next item.
	nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
	" Do default action for previous item.
	nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
	" Resume latest coc list.
	nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
da8218f6535946ad8a1f0ad5f3095c02|file:///home/leo/.config/nvim/init.vim|7|1|v|vim
	call plug#begin('~/.vim/plugged')
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
	call plug#end()
	
	
5af69ca3cfd3153bd24f9030e572ff35|file:///home/leo/.config/nvim/init.vim|10|1|V|vim
	let g:coc_global_extensions = [
	\ 'coc-json',
	\ 'coc-pairs',
	\ 'coc-tsserver',
	\ 'coc-html',
	\ 'coc-css',
	\ 'coc-yaml',
	\ 'coc-vimlsp',
	\ 'coc-highlight',
	\ 'coc-actions',
	\ 'coc-sql',
	\ 'coc-omnisharp',
	\ 'coc-python',
	\ 'coc-clangd',
	\ 'coc-yank',
	\]
7202409d8bd4b11f0320ecc936216060|file:///home/leo/.config/nvim/coc-settings.json|2|1|V|json
		"coc.preferences.formatOnSaveFiletypes": [
15630085de158e81da380ae848bfe559|file:///home/leo/.config/nvim/init.vim|26|1|V|vim
	afsdsd
ff99bdf07c6f7e5f9be270997309b1cb|file:///home/leo/test.py|1|5|v|python
	target_list
26b2a720f7b8c9bd8d3999c52da409d0|file:///home/leo/test.py|1|11|v|python
	classname
e059254e66d5d6a9613fa141dd0122cb|file:///home/leo/test.py|1|5|V|python
	for class dGGfGG(object):
	    pass in expression_list:
	    pass
c08a4510ef28e08e6b7f18a281393d78|file:///home/leo/.config/nvim/general/settings.vim|1|1|V|vim
	source ~/.config/nvim/vim-plug/plugins.vim
634f233c2db112a951e002160435937c|file:///home/leo/.config/nvim/general/settings.vim|1|1|V|vim
	source ~/.config/nvim/plug-config/coc.vim
bf8f452307b9c330bd65bc2019a2cf53|file:///home/leo/.config/nvim/init.vim|4|1|V|vim
	inoremap fd <ESC>
	vnoremap fd <ESC>
	
	map <Space> <leader>
	nnoremap <leader>rl :so ~/.config/nvim/init.vim<CR>
	
	let g:coc_global_extensions = [
	\ 'coc-json',
	\ 'coc-pairs',
	\ 'coc-tsserver',
	\ 'coc-html',
	\ 'coc-css',
	\ 'coc-yaml',
	\ 'coc-vimlsp',
	\ 'coc-highlight',
	\ 'coc-actions',
	\ 'coc-sql',
	\ 'coc-omnisharp',
	\ 'coc-python',
	\ 'coc-clangd',
	\ 'coc-yank',
	\]
2524166f1d30c32dfc5f971dfc229bca|file:///home/leo/.config/nvim/general/settings.vim|4|1|V|vim
	" syntax enable                           " Enables syntax highlighing
d3b1db2f8b791b451ed47366222ed86c|file:///home/leo/.config/nvim/general/settings.vim|43|1|V|vim
	inoremap fd <ESC>
	vnoremap fd <ESC>
	
	nnoremap <leader>rl :so ~/.config/nvim/init.vim<CR>
	
	let g:coc_global_extensions = [
	\ 'coc-json',
	\ 'coc-pairs',
	\ 'coc-tsserver',
	\ 'coc-html',
	\ 'coc-css',
	\ 'coc-yaml',
	\ 'coc-vimlsp',
	\ 'coc-highlight',
	\ 'coc-actions',
	\ 'coc-sql',
	\ 'coc-omnisharp',
	\ 'coc-python',
	\ 'coc-clangd',
	\ 'coc-yank',
	\]
4baa75d7f4b8096dc44ec64da1514269|file:///home/leo/.config/nvim/general/settings.vim|41|1|V|vim
	cmap w!! w !sudo tee %"
	
81efc8d1ca0da6946fc6dbd1fd43f887|file:///home/leo/.config/nvim/keys/mappings.vim|11|1|V|vim
	" I hate escape more than anything else
a58baafb173831775a0600a505951f04|file:///home/leo/.config/nvim/init.vim|3|1|V|vim
	source ~/.config/nvim/general/settings.vim
0c2d935c13910de3511d0df2a4792a59|file:///home/leo/.config/nvim/keys/mappings.vim|20|1|V|vim
	nnoremap <alt-TAB> :bnext<CR>
4f7fc7215af545f9c398ff24397b4015|file:///home/leo/.config/nvim/keys/mappings.vim|20|11|v|vim
	alt-TAB
b01bd32f7beb40a2bc963d466ae8c918|file:///home/leo/.config/nvim/init.vim|4|23|v|vim
	plug-config
127b7a1d1513b3a024c9a13fe779c21d|file:///usr/share/nvim/runtime/tutor/en/vim-01-beginner.tutor|780|1|V|tutor
	Adding 123 to asf gives you xxx.
77c4878d5e2c398b9df6356e6277b948|file:///home/leo/.config/nvim/init.vim|4|1|V|vim
	source ~/.config/nvim/themes/space-vim-dark.vim
