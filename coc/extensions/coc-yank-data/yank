2f92089b756d4463640aca81487042ea|file:///home/leo/.config/nvim/init.vim|2|1|V|vim
	map <Space> <leader>
0228e91bb6710d0c91ca3c2dcd9764dd|file:///home/leo/.config/nvim/init.vim|2|1|V|vim
	vnoremap fd <ESC>
d131ef6911d5b8434723efebe3c45ae6|file:///home/leo/.config/nvim/coc-settings.json|1|1|V|json
	" TextEdit might fail if hidden is not set.
	set hidden
	
	" Some servers have issues with backup files, see #649.
	set nobackup
	set nowritebackup
	
	" Give more space for displaying messages.
	set cmdheight=2
	
	" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
	" delays and poor user experience.
	set updatetime=300
	
	" Don't pass messages to |ins-completion-menu|.
	set shortmess+=c
	
	" Always show the signcolumn, otherwise it would shift the text each time
	" diagnostics appear/become resolved.
	if has("patch-8.1.1564")
	  " Recently vim can merge signcolumn and number column into one
	  set signcolumn=number
	else
	  set signcolumn=yes
	endif
	
	" Use tab for trigger completion with characters ahead and navigate.
	" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
	" other plugin before putting this into your config.
	inoremap <silent><expr> <TAB>
	      \ pumvisible() ? "\<C-n>" :
	      \ <SID>check_back_space() ? "\<TAB>" :
	      \ coc#refresh()
	inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
	
	function! s:check_back_space() abort
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~# '\s'
	endfunction
	
	" Use <c-space> to trigger completion.
	if has('nvim')
	  inoremap <silent><expr> <c-space> coc#refresh()
	else
	  inoremap <silent><expr> <c-@> coc#refresh()
	endif
	
	" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
	" position. Coc only does snippet and additional edit on confirm.
	" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
	if exists('*complete_info')
	  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
	else
	  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
	endif
	
	" Use `[g` and `]g` to navigate diagnostics
	" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
	nmap <silent> [g <Plug>(coc-diagnostic-prev)
	nmap <silent> ]g <Plug>(coc-diagnostic-next)
	
	" GoTo code navigation.
	nmap <silent> gd <Plug>(coc-definition)
	nmap <silent> gy <Plug>(coc-type-definition)
	nmap <silent> gi <Plug>(coc-implementation)
	nmap <silent> gr <Plug>(coc-references)
	
	" Use K to show documentation in preview window.
	nnoremap <silent> K :call <SID>show_documentation()<CR>
	
	function! s:show_documentation()
	  if (index(['vim','help'], &filetype) >= 0)
	    execute 'h '.expand('<cword>')
	  else
	    call CocAction('doHover')
	  endif
	endfunction
	
	" Highlight the symbol and its references when holding the cursor.
	autocmd CursorHold * silent call CocActionAsync('highlight')
	
	" Symbol renaming.
	nmap <leader>rn <Plug>(coc-rename)
	
	" Formatting selected code.
	xmap <leader>f  <Plug>(coc-format-selected)
	nmap <leader>f  <Plug>(coc-format-selected)
	
	augroup mygroup
	  autocmd!
	  " Setup formatexpr specified filetype(s).
	  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	  " Update signature help on jump placeholder.
	  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
	augroup end
	
	" Applying codeAction to the selected region.
	" Example: `<leader>aap` for current paragraph
	xmap <leader>a  <Plug>(coc-codeaction-selected)
	nmap <leader>a  <Plug>(coc-codeaction-selected)
	
	" Remap keys for applying codeAction to the current buffer.
	nmap <leader>ac  <Plug>(coc-codeaction)
	" Apply AutoFix to problem on the current line.
	nmap <leader>qf  <Plug>(coc-fix-current)
	
	" Map function and class text objects
	" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
	xmap if <Plug>(coc-funcobj-i)
	omap if <Plug>(coc-funcobj-i)
	xmap af <Plug>(coc-funcobj-a)
	omap af <Plug>(coc-funcobj-a)
	xmap ic <Plug>(coc-classobj-i)
	omap ic <Plug>(coc-classobj-i)
	xmap ac <Plug>(coc-classobj-a)
	omap ac <Plug>(coc-classobj-a)
	
	" Use CTRL-S for selections ranges.
	" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
	nmap <silent> <C-s> <Plug>(coc-range-select)
	xmap <silent> <C-s> <Plug>(coc-range-select)
	
	" Add `:Format` command to format current buffer.
	command! -nargs=0 Format :call CocAction('format')
	
	" Add `:Fold` command to fold current buffer.
	command! -nargs=? Fold :call     CocAction('fold', <f-args>)
	
	" Add `:OR` command for organize imports of the current buffer.
	command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
	
	" Add (Neo)Vim's native statusline support.
	" NOTE: Please see `:h coc-status` for integrations with external plugins that
	" provide custom statusline: lightline.vim, vim-airline.
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	
	" Mappings for CoCList
	" Show all diagnostics.
	nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
	" Manage extensions.
	nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
	" Show commands.
	nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
	" Find symbol of current document.
	nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
	" Search workspace symbols.
	nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
	" Do default action for next item.
	nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
	" Do default action for previous item.
	nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
	" Resume latest coc list.
	nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
da8218f6535946ad8a1f0ad5f3095c02|file:///home/leo/.config/nvim/init.vim|7|1|v|vim
	call plug#begin('~/.vim/plugged')
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
	call plug#end()
	
	
5af69ca3cfd3153bd24f9030e572ff35|file:///home/leo/.config/nvim/init.vim|10|1|V|vim
	let g:coc_global_extensions = [
	\ 'coc-json',
	\ 'coc-pairs',
	\ 'coc-tsserver',
	\ 'coc-html',
	\ 'coc-css',
	\ 'coc-yaml',
	\ 'coc-vimlsp',
	\ 'coc-highlight',
	\ 'coc-actions',
	\ 'coc-sql',
	\ 'coc-omnisharp',
	\ 'coc-python',
	\ 'coc-clangd',
	\ 'coc-yank',
	\]
7202409d8bd4b11f0320ecc936216060|file:///home/leo/.config/nvim/coc-settings.json|2|1|V|json
		"coc.preferences.formatOnSaveFiletypes": [
15630085de158e81da380ae848bfe559|file:///home/leo/.config/nvim/init.vim|26|1|V|vim
	afsdsd
ff99bdf07c6f7e5f9be270997309b1cb|file:///home/leo/test.py|1|5|v|python
	target_list
26b2a720f7b8c9bd8d3999c52da409d0|file:///home/leo/test.py|1|11|v|python
	classname
e059254e66d5d6a9613fa141dd0122cb|file:///home/leo/test.py|1|5|V|python
	for class dGGfGG(object):
	    pass in expression_list:
	    pass
c08a4510ef28e08e6b7f18a281393d78|file:///home/leo/.config/nvim/general/settings.vim|1|1|V|vim
	source ~/.config/nvim/vim-plug/plugins.vim
634f233c2db112a951e002160435937c|file:///home/leo/.config/nvim/general/settings.vim|1|1|V|vim
	source ~/.config/nvim/plug-config/coc.vim
bf8f452307b9c330bd65bc2019a2cf53|file:///home/leo/.config/nvim/init.vim|4|1|V|vim
	inoremap fd <ESC>
	vnoremap fd <ESC>
	
	map <Space> <leader>
	nnoremap <leader>rl :so ~/.config/nvim/init.vim<CR>
	
	let g:coc_global_extensions = [
	\ 'coc-json',
	\ 'coc-pairs',
	\ 'coc-tsserver',
	\ 'coc-html',
	\ 'coc-css',
	\ 'coc-yaml',
	\ 'coc-vimlsp',
	\ 'coc-highlight',
	\ 'coc-actions',
	\ 'coc-sql',
	\ 'coc-omnisharp',
	\ 'coc-python',
	\ 'coc-clangd',
	\ 'coc-yank',
	\]
2524166f1d30c32dfc5f971dfc229bca|file:///home/leo/.config/nvim/general/settings.vim|4|1|V|vim
	" syntax enable                           " Enables syntax highlighing
d3b1db2f8b791b451ed47366222ed86c|file:///home/leo/.config/nvim/general/settings.vim|43|1|V|vim
	inoremap fd <ESC>
	vnoremap fd <ESC>
	
	nnoremap <leader>rl :so ~/.config/nvim/init.vim<CR>
	
	let g:coc_global_extensions = [
	\ 'coc-json',
	\ 'coc-pairs',
	\ 'coc-tsserver',
	\ 'coc-html',
	\ 'coc-css',
	\ 'coc-yaml',
	\ 'coc-vimlsp',
	\ 'coc-highlight',
	\ 'coc-actions',
	\ 'coc-sql',
	\ 'coc-omnisharp',
	\ 'coc-python',
	\ 'coc-clangd',
	\ 'coc-yank',
	\]
4baa75d7f4b8096dc44ec64da1514269|file:///home/leo/.config/nvim/general/settings.vim|41|1|V|vim
	cmap w!! w !sudo tee %"
	
81efc8d1ca0da6946fc6dbd1fd43f887|file:///home/leo/.config/nvim/keys/mappings.vim|11|1|V|vim
	" I hate escape more than anything else
a58baafb173831775a0600a505951f04|file:///home/leo/.config/nvim/init.vim|3|1|V|vim
	source ~/.config/nvim/general/settings.vim
0c2d935c13910de3511d0df2a4792a59|file:///home/leo/.config/nvim/keys/mappings.vim|20|1|V|vim
	nnoremap <alt-TAB> :bnext<CR>
4f7fc7215af545f9c398ff24397b4015|file:///home/leo/.config/nvim/keys/mappings.vim|20|11|v|vim
	alt-TAB
b01bd32f7beb40a2bc963d466ae8c918|file:///home/leo/.config/nvim/init.vim|4|23|v|vim
	plug-config
127b7a1d1513b3a024c9a13fe779c21d|file:///usr/share/nvim/runtime/tutor/en/vim-01-beginner.tutor|780|1|V|tutor
	Adding 123 to asf gives you xxx.
77c4878d5e2c398b9df6356e6277b948|file:///home/leo/.config/nvim/init.vim|4|1|V|vim
	source ~/.config/nvim/themes/space-vim-dark.vim
d436eb0fd9de10b54a828ce6435f7e81|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|1|1|V|cpp
	include
42880eda4a47df1c9d8e2b544a96083d|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|6|1|v|cpp
	  cout << "Hello world";
	  return 0;
69aacb05d407b353675614c3ef0b5f8c|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|2|1|V|cpp
	std::cout
09782e2477e1049a344e8c098b561c26|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|1|9|v|cpp
	<stdio.h>
0eecf5d28a6851ed24fa23df86bcb2aa|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|7|1|V|cpp
	  cout << "Hello world\n";
c0c30a706da785a1d24d4cd9e7c01bb0|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|8|1|V|cpp
	  istream input ("input.txt");
	  return 0;
3f9178c25b78ed8bed19091bcb62e266|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|9|7|v|cpp
	condition
88314d6fa58e4a4b8c2f27001c07afd0|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|10|3|V|cpp
	  statements
099fb995346f31c749f6e40db0f395e3|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|3|11|v|cpp
	header
742597f140d99383c09ffb3e18b20d45|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|11|22|V|cpp
	    while(getline(input,line)){
	      cout << line << '\n';
	    }
20cdd879f4dcfb6fb4d7de18d7e464ff|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|7|3|v|cpp
	string 
4d3b1c26969dcdf241d0d8de8bf91aeb|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|10|29|v|cpp
	c_str
3031885885f3ba054e3471fda46d9caf|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|7|7|v|cpp
	gnt 
e0742a7913d9df7412eb286c5bee78ac|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|7|1|v|cpp
	tringnt 
fffc444f4e4ee97f63d9c5dd2af54559|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|10|19|v|cpp
	stoi
368992178a3230ebc8890f2397275cbf|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|11|18|V|cpp
	    cout << lines;
	    input.close();
f2b1d6d0cbdd285b174dc09821ec3b83|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|8|10|v|cpp
	typename _Tp
ccbee73cd81c7f42405e1920409247ec|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|13|7|v|cpp
	paris
53e61336bb49ec978968786b07dea50b|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|13|23|v|cpp
	results
77933e92e943d5ded452a293ef451f3e|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|14|5|V|cpp
	    for (int result; getline(input, lines); result = stoi(lines)) {
a7ed2dd35a6d1e98fcefd4b8ca4e958a|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|13|5|V|cpp
	    for (int result; getline(input, lines); result = stoi(lines)) {
	    int noOfLines = stoi(lines);
	      pairs.push_back(result);
	    }
	  }
	  return 0;
	}
	
62fd3f87581663e4371e40eb51d66e76|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|13|5|v|cpp
	for 
9f3edf63e0b7551daea6f7ace0ee656e|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|13|5|v|cpp
	(int 
fa85e191086f050066fe5642fbb896fc|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|13|5|v|cpp
	result; 
f617bf4332127dbac47b1b6bfc54988c|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|13|25|v|cpp
	); result = stoi(lines)) {
ea5a1cbe764918679997181a3ea281d3|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|16|5|V|cpp
	    }
6ca035f5964895446642e24fd0e82550|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|15|10|v|cpp
	init-statement
ea4583507ee2b3019c1472cb81be9072|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|14|5|V|cpp
	    int noOfLines = stoi(lines);
984a186b11e66e2c31a84272656f7c8b|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|15|5|v|cpp
	int noOfLines = stoi(lines);
	    s
26542fb18a8b14c9775aa475f23c909f|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|14|39|v|cpp
	cond
ccbc1113d8207a03da207ca48957f3e7|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|14|39|v|cpp
	iion
c297a59e67f9e7b9ee60e399db7e825e|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|14|54|v|cpp
	inc-expression
0cf31b2c283ce3431794586df7b0996d|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|15|1|v|cpp
	    
f52ceeba305a64ab1e3b59fcd77fbf53|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|15|1|v|cpp
	statements
9bbebf34a99fb0228fdd57610c261a21|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|17|7|V|cpp
	      pairs.push_back(result
7f113e18fff8e9f4adcc1c5058d79c03|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|16|7|V|cpp
	      pairs.push_back(lines);
80bf99197694c544eb7efc16aa1fda49|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|19|11|v|cpp
	condition;
48427bb655ed7da439b4440a1ae58795|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|19|3|V|cpp
	  for
2d919de77a4641043a757e1a1f042457|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|20|14|v|cpp
	first 
8da26ba680a4bc49270f115861546f0e|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|21|9|v|cpp
	is_closed
0c4f43845b5284f6e99d029956ea5214|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|18|5|V|cpp
	    getline(input, lines);
37d832b6a45f094e7b022f939fc82e1d|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|14|3|V|cpp
	    for (int noOfLines = stoi(lines); noOfLines > 0; noOfLines--) {
	      getline(input, lines);
	      pairs.push_back(lines);
	    }
46d351d5e9358453f7aed3e7bc8018dc|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|16|5|V|cpp
	  for(auto x : pairs){
	    cout << x;
	  input.close();
c0d03ff9211439e0bb2f6fd607b18957|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|15|17|V|cpp
	    while(input){
	      getline(input, lines);
	    }
a43c1b0aa53a0c908810c06ab1ff3967|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|14|11|v|cpp
	input
cd94946a10dc20ab993b24eeb1e5b23e|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|14|5|V|cpp
	    while(true){
b326b5062b2f0e69046810717534cb09|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|14|11|v|cpp
	true
8d65efc83f4032335c3ba49bfe874885|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|16|7|V|cpp
	      int noOfLines = stoi(lines);
86ee2ba55aa03b06900298d3c1884440|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|20|12|v|cpp
	int 
980da98409d058c365664ff7ea33dd6b|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|20|22|v|cpp
	lines
e272a9184b59fdc5ce0144acbfd5a64d|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|20|31|v|cpp
	noOfLines 
28562ad0b280717666fea80724930403|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|20|38|v|cpp
	noOfLines--
d82913bd584ba62f8ae03323703e07ff|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|22|9|V|cpp
	        input >> store >> lat >> lng);
2ab640573cddfcb9d5e97f8477f796e0|file:///home/leo/COMPSCI320/A3/lkeo821.cpp|27|17|v|cpp
	int lat
f6d8b886335927d46fad323c60335d09|file:///home/leo/.config/nvim/general/settings.vim|49|74|v|vim
	clip
d0725417263fca45e79d061a08cfafaf|file:///home/leo/.config/nvim/andyyu2004/andy-config.vim|18|1|v|vim
	nnoremap <leader>rl :so ~/.config/nvim/init.vim<CR>
	n
c3e427c0c48d197d0ab58e9351cc603d|file:///home/leo/.config/nvim/keys/mappings.vim|2|25|v|vim
	~/.config/nvim/init.vim<CR>
	
